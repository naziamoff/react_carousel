{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","state","imagesCount","props","images","length","translateX","pictureSize","frameSize","step","animationDuration","moveForward","stepsLeft","setState","prevState","moveBack","changeFrame","value","changeTransition","changeStep","changePicSize","resetAll","this","transform","transition","imageStyles","height","width","Object","assign","wrapperStyles","className","type","id","onClick","style","map","image","src","alt","onChange","target","valueAsNumber","min","max","defaultValue","React","Component","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a3cd3963.chunk.js","sourcesContent":["import React from 'react';\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[]\n};\n\ntype State = {\n  imagesCount: number;\n  translateX: number;\n  pictureSize: number;\n  frameSize: number;\n  step: number;\n  animationDuration: number;\n};\n\n// eslint-disable-next-line react/prefer-stateless-function\nclass Carousel extends React.Component<Props, State> {\n  state = {\n    imagesCount: this.props.images.length,\n    translateX: 0,\n    pictureSize: 130,\n    frameSize: 3,\n    step: 3,\n    animationDuration: 1000,\n  };\n\n  moveForward = () => {\n    const {\n      imagesCount, translateX, pictureSize, frameSize, step,\n    } = this.state;\n\n    const lengthLeft = (pictureSize * imagesCount) - translateX;\n    const stepsLeft = (lengthLeft / pictureSize) - frameSize;\n\n    this.setState((\n      prevState,\n    ) => ({\n      translateX: step > stepsLeft\n        ? prevState.translateX + prevState.pictureSize * stepsLeft\n        : prevState.translateX + prevState.pictureSize * step,\n    }));\n  };\n\n  moveBack = () => {\n    const { translateX, step } = this.state;\n\n    if (translateX <= 0) {\n      return;\n    }\n\n    this.setState((\n      prevState,\n    ) => ({\n      translateX: prevState.pictureSize * step > translateX\n        ? 0\n        : prevState.translateX - prevState.pictureSize * step,\n    }));\n  };\n\n  changeFrame = (value: number) => {\n    this.setState({ frameSize: value });\n  };\n\n  changeTransition = (value: number) => {\n    this.setState({ animationDuration: value });\n  };\n\n  changeStep = (value: number) => {\n    this.setState({ step: value });\n  };\n\n  changePicSize = (value: number) => {\n    this.setState({ pictureSize: value });\n  };\n\n  resetAll = () => {\n    this.setState({\n      translateX: 0,\n      pictureSize: 130,\n      frameSize: 3,\n      step: 3,\n      animationDuration: 1000,\n    });\n  };\n\n  render() {\n    const { pictureSize, frameSize, animationDuration } = this.state;\n    const { images } = this.props;\n    const transform = {\n      transform: `translateX(-${this.state.translateX}px)`,\n      transition: `transform ${animationDuration}ms`,\n    };\n\n    const imageStyles = {\n      height: `${pictureSize}px`,\n      width: `${pictureSize}px`,\n    };\n\n    Object.assign(transform, imageStyles);\n\n    const wrapperStyles = {\n      width: `${frameSize * pictureSize}px`,\n      height: `${pictureSize + 20}px`,\n    };\n\n    return (\n      <div className=\"carousel\">\n        <ul className=\"level\">\n          <button\n            type=\"button\"\n            id=\"button-back\"\n            className=\"button is-medium is-success\"\n            onClick={this.moveBack}\n          >\n            Prev\n          </button>\n          <div\n            className=\"carousel__list-wrapper level\"\n            style={wrapperStyles}\n          >\n            {images.map((image) => (\n              <li\n                key={image}\n                style={transform}\n                className=\"carousel__image\"\n              >\n                <img src={image} alt=\"\" style={imageStyles} />\n              </li>\n            ))}\n          </div>\n          <button\n            className=\"button is-medium is-success\"\n            type=\"button\"\n            id=\"button-forward\"\n            onClick={this.moveForward}\n          >\n            Next\n          </button>\n        </ul>\n        <div className=\"level inputs-container container\">\n          <div className=\"level\">\n            Size\n            <input\n              className=\"input\"\n              type=\"number\"\n              id=\"size-input\"\n              value={this.state.pictureSize}\n              onChange={\n                ({ target }) => this.changePicSize(target.valueAsNumber)\n              }\n            />\n          </div>\n          <div className=\"level\">\n            Step\n            <input\n              className=\"input\"\n              id=\"step-input\"\n              type=\"number\"\n              value={this.state.step}\n              min={1}\n              max={9}\n              onChange={({ target }) => this.changeStep(target.valueAsNumber)}\n            />\n          </div>\n          <div className=\"level\">\n            Frame\n            <input\n              className=\"input\"\n              id=\"frame-input\"\n              type=\"number\"\n              value={this.state.frameSize}\n              min={1}\n              max={9}\n              onChange={({ target }) => this.changeFrame(target.valueAsNumber)}\n            />\n          </div>\n          <div className=\"level\">\n            Animation duration\n            <input\n              className=\"input\"\n              id=\"animation-input\"\n              type=\"number\"\n              min={1}\n              defaultValue={this.state.animationDuration}\n              max={10000}\n              onChange={\n                ({ target }) => this.changeTransition(target.valueAsNumber)\n              }\n            />\n          </div>\n          <div>\n            <button\n              type=\"button\"\n              className=\"button is-large is-danger\"\n              onClick={this.resetAll}\n            >\n              Reset all\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Carousel;\n","import React from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel';\n\ninterface State {\n  images: string[];\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n  };\n\n  render() {\n    const { images } = this.state;\n\n    return (\n      <div className=\"App\">\n        {/* eslint-disable-next-line */}\n        <h1 className='title has-text-centered' data-cy=\"title\">\n          Carousel with\n          {' '}\n          {images.length}\n          {' '}\n          images\n        </h1>\n\n        <Carousel images={images} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}